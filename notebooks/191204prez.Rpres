<style>
.footer {
    color: black;
    background: #E8E8E8;
    position: fixed;
    top: 90%;
    text-align:center;
    width:2000px
}
</style>
<style>
.small-code pre code {
  font-size: 0.8em;
}
</style>
```{r set-options, echo=FALSE, cache=FALSE}
options(width = 10000)
```

Evolvable Seed Genes - progress so far
========================================================
author: Simon Hickinbotham 
date: 4 December 2019
autosize: true

Summary
========================================================

For more details on authoring R presentations please visit <https://support.rstudio.com/hc/en-us/articles/200486468>.

- Algorithm for 'growing' a set of seed genes
- Strengths and weaknesses
- Comparision with L-Systems and CPPNs
- Novelty search

Target Shape
========================================================
![](blender_table.png)



Seed genes
========================================================
class: small-code
```{r, eval = F}
gene01 <- sgene("Cross section","Square",status=T, start=-40,stop=40,dom=1)
gene02 <- sgene("Length",       5       ,status=T, start=-40,stop=40,dom=1)
gene03 <- sgene("Diameter",     1       ,status=T, start=-40,stop=40,dom=0)

gene04 <- sgene("X_1X",         0, status=T, start= 0,stop= 5,dom=50)
gene05 <- sgene("Y_1Y",         0, status=T, start= 0,stop= 5,dom=50)
gene06 <- sgene("Z_1Z",         1, status=T, start= 0,stop= 5,dom=50)

gene16 <- sgene("T1_2X",        1, status=T, start= 0,stop= 5,dom=48)
gene17 <- sgene("T2_2Y",        1, status=T, start= 0,stop=10,dom=48)
gene18 <- sgene("T1_2Z",        0, status=T, start= 0,stop=15,dom=48)

gene19 <- sgene("T3_2X",        1, status=T, start= 0,stop= 1,dom=47)
gene20 <- sgene("T3_2Y",        0, status=T, start=15,stop=16,dom=47)
gene21 <- sgene("T3_2Z",       -1, status=T, start= 6,stop=10,dom=47)

gene22 <- sgene("T4_2X",        0, status=T, start=10,stop=11,dom=46)
gene23 <- sgene("T4_2Y",        1, status=T, start= 0,stop= 4,dom=46)
gene24 <- sgene("T4_2Z",       -1, status=T, start= 6,stop=10,dom=46)

gene25 <- sgene("T5_2X",        0, status=T, start=10,stop=11,dom=45)
gene26 <- sgene("T5_2Y",        1, status=T, start= 4,stop=14,dom=45)
gene27 <- sgene("T5_2Z",        0, status=T, start= 6,stop=10,dom=45)

gene28 <- sgene("T6_2X",        1, status=T, start= 5,stop= 9,dom=44)
gene29 <- sgene("T6_2Y",        0, status=T, start=11,stop=15,dom=44)
gene30 <- sgene("T6_2Z",        0, status=T, start= 6,stop=10,dom=44)

gene31 <- sgene("L3_2X",        0, status=T, start= 0,stop=20,dom=43)
gene32 <- sgene("L3_2Y",        0, status=T, start= 0,stop=15,dom=43)
gene33 <- sgene("L3_2Z",       -1, status=T, start= 1,stop=12,dom=43)

gene34 <- sgene("L4_2X",        0, status=T, start=10,stop=11,dom=51)
gene35 <- sgene("L4_2Y",        0, status=T, start=15,stop=16,dom=51)
gene36 <- sgene("L4_2Z",       -1, status=T, start= 1,stop=10,dom=51)
```


Seed genes
========================================================

- Necessary to have an x,y,z 'zone' of activity (indicated by last letter of attribute)
- Where one of these axes is missing, the rule holds for $\pm \infty$, (but explicitly defined here atm).
- Majority of the table top is handled by `gene16` and `gene17`
- Fiddly bits around the legs and sides not connected to 1st leg

***

![](blender_table.png)



Algorithm pseudocode
========================================================
class: small-code
```{r, echo=TRUE, eval = FALSE}
genetostlfile4 <- function(fn="shape.stl",genes,pos=spos(0,0,0),runlim=1000){

  while (TRUE){
    posnext <- NULL
    for(pp in 1:nrow(pos)){
      
      shape <- getshape(pos[pp,],genes)
      domval <- domInZone(pos[pp,],genes)
      if(domval){
        
        dirs <- genes[genes$dom == domval & dirs$valtyp!=0,] # extract domlevel
        for(dd in 1:nrow(dirs)){
          direction <- get_direction(dirs)
          posnext <- addposition(dirs[dd],shape,direction,posnext)
          drawCStoSTL(pos[pp,],shape,direction)
        }
      }
    }
    
    if(is.null(posnext) | iterations++ > runlim)      
      break
    
    pos <- posnext
  }
}
```


Algorithm notes
========================================================

- Different to Belfast Algorithm! Different gene set too...
- Maintain a list of current positions
- Not possible to revisit a position to add more - a bad thing? 
- Changes in shape not explored much here
- Is mix of dominance and zoning sufficient, or is status also needed? 

***

![](blender_table.png)




Seed genes
========================================================


novelty search as a means of measuring the "expressive power" of an encoding



Strengths & Weaknesses
========================================================

- Very flexible *and readable*
- Compatible with engineering platforms / design methods

- Arbitrary start/stop points
- Not particularly compact
- X,Y,Z zones are indirectly associated via dominance levels


Novelty Search
=======

- Take a hand-designed seed, and use an evolutionary algorithm to change the design
- Novelty search rewards differences in design *without reference to fitness*
- Goal: establish the expressiveness of this approach

- Advantages: no need for an explicit fitness function
- Limitation: shape only - more work needed to investigate physical capabilities






L-Systems approach
===

- A *shape grammar*
- Start with a shape $S$
- Then have a set of production rules: $S \rightarrow ETE$




CPPN approach
====











